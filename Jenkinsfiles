pipeline {
    agent any
    tools {
        maven 'maven_3.6.3'
    }

    stages {

        stage('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "M2_HOME = ${M2_HOME}"
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'main']], extensions: [[$class: 'CheckoutOption', timeout: 5], [$class: 'CloneOption', noTags: false, reference: '', shallow: false, timeout: 5]], userRemoteConfigs: [[url: 'https://github.com/ommey/DevOps.git']]])

                echo 'Checkout source code from git'
            }
        }
        stage('Quality Check and Security Check') {
            steps {
		parallel(
		    'Quality Check':{
	                echo 'QA verified'
		    },
		    'Security Check':{
			 dependencyCheck additionalArguments: '--scan=. --format=HTML', odcInstallation: 'OWASP-Dependency-Check'
	                 echo 'All security checks done'
		    }
		)
            }
        }
        stage('Build Push App') {
            steps {
                sh "mvn clean install"
            }
        }   
        stage('Kill previous deploy ment') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "fuser -k 8083/tcp"
                }
            }
        }

        stage('Deploy') {
            steps {
                sh "JENKINS_NODE_COOKIE=dontKillMe nohup java -jar ./target/spring-boot-rest-2-0.0.1-SNAPSHOT.jar &"
                echo 'Deployment done'
            }
        }
        agent { node { label 'Delegated job' } }
			
			environment{
				SCRIPT_LOCATION="C:\\DevOps\\workspace\\Delegated job"
				SCRIPT_NAME="SAFAL DevOps Script.xlsx"        
				BROWSER="Chrome"
				OWT="5"
				TESTURL="http://www.google.com"        
				CMDARGS=""
				NONUIMode="false"
				RESULT_LOCATION="${WORKSPACE}/Results/"
			}	
			
            steps {                
					echo "Executing Test using SAFAL"
                
					bat  "LaunchSAFAL.bat   ${env.SCRIPT_NAME}  \"${env.SCRIPT_LOCATION}\" ${env.BROWSER} \"URL=${env.TESTURL};OWT=${env.OWT};CMDARGUMENTS=${env.CMDARGS}\" \"${env.RESULT_LOCATION}\" ${env.NONUIMode}  "               
            }			
            post {                
                    always {
                        echo "Test execution done. Uploading results to Jenkins Server...."                        
                        archiveArtifacts artifacts: 'Results/**'
						echo "Done"
                }
            }			
        }
    }
}
